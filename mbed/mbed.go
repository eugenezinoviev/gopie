package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"
)

const rootTemplate = `// DO NOT EDIT THIS FILE
// Code generated by mbed.go
// %v

package %v

var files = map[string][]byte{
%v
}

func GetFileBytes(path string) []byte {
	return files[path]
}

func GetFileContent(path string) string {
	return string(files[path])
}

func GetFiles() []string {
	result := make([]string, len(files))
    idx := 0
	for key, _ := range files {
		result[idx] = key
		idx++
	}
	return result
}
`
const fileItemTemplate = `"%v": []byte("%v"),
`

func check(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func listFiles(searchDir, inputFile string) (files []string, err error) {
	files = []string{}

	if inputFile != "" {
		files = append(files, inputFile)
		return
	}

	err = filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
		files = append(files, path)
		return nil
	})
	return
}

func getFlags() (inputDir, inputFile, outputFile, pkg string, err error) {
	flag.StringVar(&inputDir, "d", "", "Input dir.")
	flag.StringVar(&inputFile, "f", "", "Input file.")
	flag.StringVar(&outputFile, "o", "", "Output file.")
	flag.StringVar(&pkg, "p", "main", "Package.")
	flag.Parse()

	if inputDir == "" && inputFile == "" {
		err = fmt.Errorf("input directory ot input file is required")
	}

	if outputFile == "" {
		err = fmt.Errorf("output file is required")
	}
	return
}

func getFilesMap(files []string) string {
	fileItems := ""
	for _, file := range files {
		info, err := os.Stat(file)
		check(err)

		if !info.IsDir() {
			fileItems = fileItems + getFileItemLine(file)
		}
	}
	return fileItems
}

func getFileItemLine(file string) string {
	hexBytesString := getFileHexBytesString(file)
	filename := file
	filename = strings.Replace(filename, "\\", "/", -1)
	return fmt.Sprintf(fileItemTemplate, filename, hexBytesString)
}

func getFileHexBytesString(file string) string {
	data, err := ioutil.ReadFile(file)
	check(err)
	buffer := bytes.NewBufferString("")
	for _, b := range data {
		fmt.Fprintf(buffer, "\\x%02x", b)
	}
	return buffer.String()
}

func main() {
	inputDir, inputFile, outputFile, pkg, err := getFlags()
	check(err)

	if _, err = os.Stat(outputFile); err == nil {
		err = os.Remove(outputFile)
		check(err)
	}

	files, err := listFiles(inputDir, inputFile)
	check(err)

	buffer := bytes.NewBufferString("")
	fileItems := getFilesMap(files)
	fmt.Fprintf(buffer, string(rootTemplate), time.Now().UTC(), pkg, fileItems)

	err = ioutil.WriteFile(outputFile, buffer.Bytes(), 0666)
	check(err)
}
